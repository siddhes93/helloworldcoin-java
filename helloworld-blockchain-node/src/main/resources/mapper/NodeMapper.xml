<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xingkaichun.helloworldblockchain.node.dao.NodeDao" >

    <resultMap id="BaseResultMap" type="com.xingkaichun.helloworldblockchain.node.model.NodeEntity" >
        <id column="ip" property="ip" jdbcType="VARCHAR" />
        <result column="port" property="port" jdbcType="INTEGER" />
        <result column="blockChainHeight" property="blockChainHeight" jdbcType="INTEGER" />
        <result column="isNodeAvailable" property="isNodeAvailable" jdbcType="INTEGER" />
        <result column="errorConnectionTimes" property="errorConnectionTimes" jdbcType="INTEGER" />
        <result column="fork" property="fork" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Base_Column_List" >
        ip, port, blockChainHeight, isNodeAvailable, errorConnectionTimes, fork
    </sql>

    <select id="queryNode" parameterType="com.xingkaichun.helloworldblockchain.node.dto.nodeserver.SimpleNode" resultMap="BaseResultMap">
        select * from Node WHERE ip = #{ip,jdbcType=VARCHAR} and port = #{port,jdbcType=INTEGER}
    </select>

    <select id="queryAllNoForkNodeList" resultMap="BaseResultMap">
        select * from Node where fork = 0
    </select>

    <select id="queryAllNoForkAliveNodeList" resultMap="BaseResultMap">
        select * from Node WHERE isNodeAvailable = 1 and fork = 0
    </select>

    <delete id="deleteNode" parameterType="com.xingkaichun.helloworldblockchain.node.dto.nodeserver.SimpleNode" >
        delete from Node WHERE ip = #{ip,jdbcType=VARCHAR} and port = #{port,jdbcType=INTEGER}
    </delete>

    <insert id="addNode" parameterType="com.xingkaichun.helloworldblockchain.node.model.NodeEntity">
        INSERT INTO Node (ip, port, blockChainHeight, isNodeAvailable, errorConnectionTimes, fork)
        VALUES (#{ip,jdbcType=VARCHAR}, #{port,jdbcType=INTEGER}), #{blockChainHeight,jdbcType=INTEGER})
        , #{isNodeAvailable,jdbcType=INTEGER}), #{errorConnectionTimes, jdbcType=INTEGER}, #{fork,jdbcType=INTEGER}))
    </insert>

    <update id="updateNode" parameterType="com.xingkaichun.helloworldblockchain.node.model.NodeEntity">
        UPDATE Node SET
        <trim suffixOverrides=",">
            <if test="ip != null and ip != ''">
                ip = #{ip,jdbcType=VARCHAR},
            </if>
            <if test="port != null and port != 0">
                port = #{port,jdbcType=INTEGER},
            </if>
            <if test="blockChainHeight != null and blockChainHeight != 0">
                blockChainHeight = #{blockChainHeight,jdbcType=INTEGER},
            </if>
            <if test="isNodeAvailable != null and isNodeAvailable != 0">
                isNodeAvailable = #{isNodeAvailable,jdbcType=INTEGER},
            </if>
            <if test="errorConnectionTimes != null and errorConnectionTimes != ''">
                errorConnectionTimes = #{errorConnectionTimes,jdbcType=INTEGER},
            </if>
            <if test="fork != null and fork != 0">
                fork = #{fork,jdbcType=INTEGER},
            </if>
        </trim>
        where ip = #{ip,jdbcType=VARCHAR} and port = #{port,jdbcType=INTEGER}
    </update>
</mapper>